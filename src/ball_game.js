// Generated by CoffeeScript 1.10.0
(function() {
  var Ball, GameState, Phaser, create, game, game_state, size_x, size_y, update;

  Phaser = window.Phaser;

  game_state = null;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  GameState = (function() {
    function GameState() {
      this.balls = [];
    }

    GameState.prototype.new_ball = function(x, y) {
      return this.balls.push(new Ball(x, y));
    };

    GameState.prototype.update = function(dt) {
      var ball, i, len, ref, results;
      ref = this.balls;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ball = ref[i];
        results.push(ball.update(dt));
      }
      return results;
    };

    return GameState;

  })();

  Ball = (function() {
    function Ball(x1, y1) {
      this.x = x1;
      this.y = y1;
      this.dx = 0;
      this.dy = 0;
      this.ensure_bounds();
      this.random_direction();
      this.graphics = game.add.graphics(this.x, this.y);
      this.graphics.lineStyle(0);
      this.graphics.beginFill(Math.random() * 0xFFFFFF);
      this.graphics.drawCircle(0, 0, 5);
      this.graphics.endFill();
    }

    Ball.prototype.ensure_bounds = function() {
      var bounce, max_x, max_y, min_x, min_y;
      min_x = 5;
      max_x = size_x - 5;
      min_y = 5;
      max_y = size_y - 5;
      bounce = false;
      if (this.x < min_x) {
        this.x = min_x;
        this.dx = -this.dx;
        bounce = true;
      }
      if (this.x > max_x) {
        this.x = max_x;
        this.dx = -this.dx;
        bounce = true;
      }
      if (this.y < min_y) {
        this.y = min_y;
        this.dy = -this.dy;
        bounce = true;
      }
      if (this.y > max_y) {
        this.y = max_y;
        this.dy = -this.dy;
        bounce = true;
      }
      if (bounce) {
        this.dx *= 0.8;
        return this.dy *= 0.8;
      }
    };

    Ball.prototype.random_direction = function() {
      var angle, speed;
      angle = Math.random() * 2 * Math.PI;
      speed = Math.random() * 400.0;
      this.dx = Math.cos(angle) * speed;
      return this.dy = Math.sin(angle) * speed;
    };

    Ball.prototype.update = function(dt) {
      this.dy += 20.0 * dt;
      this.x += this.dx * dt;
      this.y += this.dy * dt;
      this.ensure_bounds();
      this.graphics.x = this.x;
      return this.graphics.y = this.y;
    };

    return Ball;

  })();

  update = function() {
    return game_state.update(game.time.elapsed / 1000.0);
  };

  create = function() {
    game.stage.backgroundColor = "88F";
    return game.input.onTap.add(function() {
      return game_state.new_ball(game.input.activePointer.worldX, game.input.activePointer.worldY);
    });
  };

  game_state = new GameState;

  game = new Phaser.Game(size_x, size_y, Phaser.AUTO, '', {
    create: create,
    update: update
  });

}).call(this);
