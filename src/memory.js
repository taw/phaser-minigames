// Generated by CoffeeScript 1.10.0
(function() {
  var Board, GameState, MenuState, Phaser, Tile, game, shuffle, size_x, size_y,
    slice = [].slice;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  shuffle = function(a) {
    var i, j, t;
    i = a.length;
    while (--i > 0) {
      j = ~~(Math.random() * (i + 1));
      t = a[j];
      a[j] = a[i];
      a[i] = t;
    }
    return a;
  };

  Tile = (function() {
    function Tile(x, y, c) {
      this.x = x;
      this.y = y;
      this.c = c;
      this.status = "hidden";
      this.bg = game.add.graphics(this.x, this.y);
      this.bg.lineStyle(2, 0x000000, 1);
      this.bg.beginFill(0xFF8888);
      this.bg.drawPolygon(-48, -48, -48, 48, 48, 48, 48, -48, -48, -48);
      this.tile = game.add.sprite(this.x, this.y, "cat" + c);
      this.tile.anchor.setTo(0.5, 0.5);
      this.tile.height = 96;
      this.tile.width = 96;
      this.tile.visible = false;
      this.hidden_tile = game.add.text(this.x, this.y, "?");
      this.hidden_tile.anchor.setTo(0.5, 0.5);
    }

    Tile.prototype.set_status = function(status) {
      this.status = status;
      switch (status) {
        case "hidden":
          this.tile.visible = false;
          return this.hidden_tile.visible = true;
        case "peek":
        case "revealed":
          this.tile.visible = true;
          return this.hidden_tile.visible = false;
      }
    };

    return Tile;

  })();

  Board = (function() {
    function Board(size_x1, size_y1) {
      var cats, tiles, x, y;
      this.size_x = size_x1;
      this.size_y = size_y1;
      cats = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]).slice(0, this.size_x * this.size_y / 2);
      tiles = shuffle(slice.call(cats).concat(slice.call(cats)));
      this.content = (function() {
        var k, ref, results;
        results = [];
        for (x = k = 0, ref = this.size_x; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (y = l = 0, ref1 = this.size_y; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
              results1.push(tiles.pop());
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
      this.setup_grid();
      this.status = "ready";
    }

    Board.prototype.setup_grid = function() {
      var loc_x, loc_y, x, y;
      return this.grid = (function() {
        var k, ref, results;
        results = [];
        for (x = k = 0, ref = this.size_x; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (y = l = 0, ref1 = this.size_y; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
              loc_x = size_x / 2 + 96 * (x - this.size_x / 2 + 0.5);
              loc_y = size_y / 2 + 96 * (y - this.size_y / 2 + 0.5);
              results1.push(new Tile(loc_x, loc_y, this.content[x][y]));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    };

    Board.prototype.click_cell = function(x, y) {
      if (this.grid[x][y].status === "revealed") {
        return null;
      }
      switch (this.status) {
        case "ready":
          this.grid[x][y].set_status("peek");
          this.x1 = x;
          this.y1 = y;
          this.status = "one";
          return null;
        case "one":
          if (x === this.x1 && y === this.y1) {
            return null;
          } else if (this.grid[x][y].c === this.grid[this.x1][this.y1].c) {
            this.grid[this.x1][this.y1].set_status("revealed");
            this.grid[x][y].set_status("revealed");
            this.status = "ready";
            return "match";
          } else {
            this.grid[x][y].set_status("peek");
            this.x2 = x;
            this.y2 = y;
            this.status = "two";
            return "miss";
          }
          break;
        case "two":
          this.grid[this.x1][this.y1].set_status("hidden");
          this.grid[this.x2][this.y2].set_status("hidden");
          this.status = "ready";
          this.click_cell(x, y);
          return null;
      }
    };

    return Board;

  })();

  GameState = (function() {
    function GameState(x, y) {
      this.x = x;
      this.y = y;
    }

    GameState.prototype.update = function() {
      return this.scoreText.text = "Clicks: " + this.score;
    };

    GameState.prototype.click = function(x, y) {
      x = Math.round((x - size_x / 2 + 96 * (this.board.size_x / 2 - 0.5)) / 96);
      y = Math.round((y - size_y / 2 + 96 * (this.board.size_y / 2 - 0.5)) / 96);
      if (x >= 0 && x <= this.board.size_x - 1 && y >= 0 && y <= this.board.size_y - 1) {
        switch (this.board.click_cell(x, y)) {
          case "match":
            this.meow.play();
            return this.score += 1;
          case "miss":
            return this.score += 1;
        }
      }
    };

    GameState.prototype.create = function() {
      this.score = 0;
      this.scoreText = game.add.text(16, 16, '', {
        fontSize: '32px',
        fill: '#fff'
      });
      this.meow = game.add.audio("meow");
      this.button_menu = game.add.button(16, 64, 'menu', (function(_this) {
        return function() {
          return game.state.start("Menu");
        };
      })(this));
      this.game.stage.backgroundColor = "88F";
      this.board = new Board(this.x, this.y);
      return this.game.input.onTap.add((function(_this) {
        return function() {
          return _this.click(_this.game.input.activePointer.worldX, _this.game.input.activePointer.worldY);
        };
      })(this));
    };

    return GameState;

  })();

  MenuState = (function() {
    function MenuState() {}

    MenuState.prototype.preload = function() {
      var i, k;
      for (i = k = 1; k <= 20; i = ++k) {
        this.game.load.image("cat" + i, "../images/cat_images/cat" + i + ".png");
      }
      this.game.load.audio("meow", "../audio/cat_meow.mp3");
      this.game.load.image("menu", "../images/buttons/menu.png");
      this.game.load.image("button2x2", "../images/buttons/play2x2.png");
      this.game.load.image("button4x4", "../images/buttons/play4x4.png");
      return this.game.load.image("button6x6", "../images/buttons/play6x6.png");
    };

    MenuState.prototype.create = function() {
      this.game.stage.backgroundColor = "F8F";
      this.button22 = game.add.button(size_x * 0.5, size_y * 0.33, 'button2x2', (function(_this) {
        return function() {
          return game.state.start("Game2x2");
        };
      })(this));
      this.button22.anchor.set(0.5, 0.5);
      this.button44 = game.add.button(size_x * 0.5, size_y * 0.50, 'button4x4', (function(_this) {
        return function() {
          return game.state.start("Game4x4");
        };
      })(this));
      this.button44.anchor.set(0.5, 0.5);
      this.button66 = game.add.button(size_x * 0.5, size_y * 0.67, 'button6x6', (function(_this) {
        return function() {
          return game.state.start("Game6x6");
        };
      })(this));
      return this.button66.anchor.set(0.5, 0.5);
    };

    return MenuState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Menu", MenuState, true);

  game.state.add("Game2x2", new GameState(2, 2));

  game.state.add("Game4x4", new GameState(4, 4));

  game.state.add("Game6x6", new GameState(6, 6));

}).call(this);
