// Generated by CoffeeScript 1.10.0
(function() {
  var Board, GameState, Phaser, Tile, game, shuffle, size_x, size_y,
    slice = [].slice;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  shuffle = function(a) {
    var i, j, t;
    i = a.length;
    while (--i > 0) {
      j = ~~(Math.random() * (i + 1));
      t = a[j];
      a[j] = a[i];
      a[i] = t;
    }
    return a;
  };

  Tile = (function() {
    function Tile(x, y, c) {
      this.x = x;
      this.y = y;
      this.c = c;
      this.status = null;
      this.bg = game.add.graphics(this.x, this.y);
      this.bg.lineStyle(2, 0x000000, 1);
      this.bg.beginFill(0x888888);
      this.bg.drawPolygon(-48, -48, -48, 48, 48, 48, 48, -48, -48, -48);
      this.tile = game.add.sprite(this.x, this.y, "cat" + c);
      this.tile.anchor.setTo(0.5, 0.5);
      this.tile.height = 96;
      this.tile.width = 96;
      this.tile.visible = false;
      this.hidden_tile = game.add.text(this.x, this.y, "?");
      this.hidden_tile.anchor.setTo(0.5, 0.5);
    }

    return Tile;

  })();

  Board = (function() {
    function Board() {
      var tiles, x, y;
      this.size_x = 6;
      this.size_y = 6;
      tiles = shuffle(slice.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]).concat(slice.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])));
      this.content = (function() {
        var k, ref, results;
        results = [];
        for (x = k = 0, ref = this.size_x; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (y = l = 0, ref1 = this.size_y; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
              results1.push(tiles.pop());
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
      this.setup_grid();
    }

    Board.prototype.setup_grid = function() {
      var loc_x, loc_y, x, y;
      return this.grid = (function() {
        var k, ref, results;
        results = [];
        for (x = k = 0, ref = this.size_x; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (y = l = 0, ref1 = this.size_y; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
              loc_x = (size_x / 2 - 96 * 2.5) + 96 * x;
              loc_y = (size_y / 2 - 96 * 2.5) + 96 * y;
              results1.push(new Tile(loc_x, loc_y, this.content[x][y]));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    };

    return Board;

  })();

  GameState = (function() {
    function GameState() {}

    GameState.prototype.preload = function() {
      var i, k, results;
      results = [];
      for (i = k = 1; k <= 18; i = ++k) {
        results.push(this.game.load.image("cat" + i, "/images/cat_images/cat" + i + ".png"));
      }
      return results;
    };

    GameState.prototype.update = function() {
      return null;
    };

    GameState.prototype.click = function(x, y) {
      x = Math.floor((x - size_x / 2 + 200) / 40);
      y = Math.floor((y - size_y / 2 + 200) / 40);
      if (x >= 0 && x <= this.board.size_x - 1 && y >= 0 && y <= this.board.size_y - 1) {
        return this.board.click_cell(x, y);
      }
    };

    GameState.prototype.create = function() {
      this.game.stage.backgroundColor = "88F";
      this.board = new Board;
      return this.game.input.onTap.add((function(_this) {
        return function() {
          return _this.click(_this.game.input.activePointer.worldX, _this.game.input.activePointer.worldY);
        };
      })(this));
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
