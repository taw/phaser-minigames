// Generated by CoffeeScript 1.10.0
(function() {
  var GameState, Phaser, game, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  GameState = (function() {
    function GameState() {
      null;
    }

    GameState.prototype.new_cell = function(x, y) {
      var text;
      text = new Phaser.Text(game, size_x / 2 - 200 + 200 * x, size_y / 2 - 200 + 200 * y, "", {
        font: "64px Arial",
        fill: "000",
        align: "center"
      });
      text.anchor.set(0.5);
      game.add.existing(text);
      return text;
    };

    GameState.prototype.update = function() {
      var i, results, x, y;
      results = [];
      for (y = i = 0; i <= 2; y = ++i) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (x = j = 0; j <= 2; x = ++j) {
            results1.push(this.content_cells[y][x].text = this.content[y][x]);
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GameState.prototype.create = function() {
      var x, y;
      this.active = true;
      this.content = (function() {
        var i, results;
        results = [];
        for (y = i = 0; i <= 2; y = ++i) {
          results.push((function() {
            var j, results1;
            results1 = [];
            for (x = j = 0; j <= 2; x = ++j) {
              results1.push("?");
            }
            return results1;
          })());
        }
        return results;
      })();
      this.content_cells = (function() {
        var i, results;
        results = [];
        for (y = i = 0; i <= 2; y = ++i) {
          results.push((function() {
            var j, results1;
            results1 = [];
            for (x = j = 0; j <= 2; x = ++j) {
              results1.push(this.new_cell(x, y));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
      this.game.stage.backgroundColor = "F88";
      this.grid = game.add.graphics(size_x / 2, size_y / 2);
      this.grid.lineStyle(5, "red");
      this.grid.moveTo(-300, 100);
      this.grid.lineTo(300, 100);
      this.grid.moveTo(-300, -100);
      this.grid.lineTo(300, -100);
      this.grid.moveTo(-100, -300);
      this.grid.lineTo(-100, 300);
      this.grid.moveTo(100, -300);
      this.grid.lineTo(100, 300);
      this.grid.endFill();
      return this.game.input.onTap.add((function(_this) {
        return function() {
          return _this.click(_this.game.input.activePointer.worldX, _this.game.input.activePointer.worldY);
        };
      })(this));
    };

    GameState.prototype.click = function(x, y) {
      x = Math.floor((x - size_x / 2 + 300) / 200);
      y = Math.floor((y - size_y / 2 + 300) / 200);
      if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {
        return this.click_cell(x, y);
      }
    };

    GameState.prototype.check_who_won = function() {
      return null;
    };

    GameState.prototype.ai_movement = function() {
      if (this.active === false) {
        return;
      }
      return null;
    };

    GameState.prototype.click_cell = function(x, y) {
      if (this.active === false) {
        return;
      }
      if (this.content[y][x] === "?") {
        this.content[y][x] = "X";
        this.check_who_won();
        return this.ai_movement();
      }
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
