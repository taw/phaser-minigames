// Generated by CoffeeScript 1.10.0
(function() {
  var GameState, Phaser, game, randint, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  randint = function(a, b) {
    return a + Math.floor(Math.random() * (b - a));
  };

  GameState = (function() {
    function GameState() {
      null;
    }

    GameState.prototype.interpolate_angle = function(distance, angle_ratio) {
      var a, x, y;
      x = size_x / 2 + distance * Math.sin(Math.PI * 2 * angle_ratio);
      y = size_y / 2 - distance * Math.cos(Math.PI * 2 * angle_ratio);
      a = 360 * angle_ratio;
      return [x, y, a];
    };

    GameState.prototype.hour_text = function(i) {
      var label, text;
      label = "" + i;
      text = new Phaser.Text(game, 0, 0, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      return game.add.existing(text);
    };

    GameState.prototype.minute_text = function(i) {
      var label, text;
      label = "" + i;
      text = new Phaser.Text(game, 0, 0, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      return game.add.existing(text);
    };

    GameState.prototype.second_text = function(i) {
      var label, text;
      label = "" + i;
      text = new Phaser.Text(game, 0, 0, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      return game.add.existing(text);
    };

    GameState.prototype.update = function() {
      var angle, i, j, k, l, ref, ref1, ref2, results, s, time, x, y;
      time = new Date();
      if (this.last_time && time.getSeconds() === this.last_time.getSeconds()) {
        return;
      }
      this.last_time = time;
      for (i = j = 0; j <= 23; i = ++j) {
        s = time.getHours();
        ref = this.interpolate_angle(175, (i - s) / 24), x = ref[0], y = ref[1], angle = ref[2];
        this.hours[i].x = x;
        this.hours[i].y = y;
        this.hours[i].angle = angle;
        if (s === i) {
          this.hours[i].fill = "#44ff00";
        } else {
          this.hours[i].fill = "#ff0044";
        }
      }
      for (i = k = 0; k <= 59; i = ++k) {
        s = time.getMinutes();
        ref1 = this.interpolate_angle(250, (i - s) / 60), x = ref1[0], y = ref1[1], angle = ref1[2];
        this.minutes[i].x = x;
        this.minutes[i].y = y;
        this.minutes[i].angle = angle;
        if (s === i) {
          this.minutes[i].fill = "#44ff00";
        } else {
          this.minutes[i].fill = "#ff0044";
        }
      }
      results = [];
      for (i = l = 0; l <= 59; i = ++l) {
        s = time.getSeconds();
        ref2 = this.interpolate_angle(325, (i - s) / 60), x = ref2[0], y = ref2[1], angle = ref2[2];
        this.seconds[i].x = x;
        this.seconds[i].y = y;
        this.seconds[i].angle = angle;
        if (s === i) {
          results.push(this.seconds[i].fill = "#44ff00");
        } else {
          results.push(this.seconds[i].fill = "#ff0044");
        }
      }
      return results;
    };

    GameState.prototype.create = function() {
      var i;
      this.last_time = null;
      this.game.stage.backgroundColor = "88F";
      this.hours = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 23; i = ++j) {
          results.push(this.hour_text(i));
        }
        return results;
      }).call(this);
      this.minutes = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 59; i = ++j) {
          results.push(this.minute_text(i));
        }
        return results;
      }).call(this);
      return this.seconds = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 59; i = ++j) {
          results.push(this.second_text(i));
        }
        return results;
      }).call(this);
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
