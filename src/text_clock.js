// Generated by CoffeeScript 1.10.0
(function() {
  var GameState, Phaser, game, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  GameState = (function() {
    function GameState() {
      null;
    }

    GameState.prototype.hour_text = function(i) {
      var label, text, x, y;
      x = size_x / 2 + 200 * Math.sin(Math.PI * 2 * i / 24);
      y = size_y / 2 - 200 * Math.cos(Math.PI * 2 * i / 24);
      label = "" + i;
      text = new Phaser.Text(game, x, y, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      text.angle = 360 * i / 24;
      return game.add.existing(text);
    };

    GameState.prototype.minute_text = function(i) {
      var label, text, x, y;
      x = size_x / 2 + 300 * Math.sin(Math.PI * 2 * i / 60);
      y = size_y / 2 - 300 * Math.cos(Math.PI * 2 * i / 60);
      label = "" + i;
      text = new Phaser.Text(game, x, y, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      text.angle = 360 * i / 60;
      return game.add.existing(text);
    };

    GameState.prototype.second_text = function(i) {
      var label, text, x, y;
      x = size_x / 2 + 400 * Math.sin(Math.PI * 2 * i / 60);
      y = size_y / 2 - 400 * Math.cos(Math.PI * 2 * i / 60);
      label = "" + i;
      text = new Phaser.Text(game, x, y, label, {
        font: "20px Arial",
        fill: "#ff0044",
        align: "center"
      });
      text.anchor.set(0.5);
      text.angle = 360 * i / 60;
      return game.add.existing(text);
    };

    GameState.prototype.update = function() {
      return null;
    };

    GameState.prototype.create = function() {
      var i;
      this.game.stage.backgroundColor = "88F";
      this.hours = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 23; i = ++j) {
          results.push(this.hour_text(i));
        }
        return results;
      }).call(this);
      this.minutes = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 59; i = ++j) {
          results.push(this.minute_text(i));
        }
        return results;
      }).call(this);
      return this.seconds = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 59; i = ++j) {
          results.push(this.second_text(i));
        }
        return results;
      }).call(this);
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
