// Generated by CoffeeScript 1.10.0
(function() {
  var Board, Cell, GameState, Phaser, game, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  Cell = (function() {
    function Cell(x, y, c) {
      var label, style;
      this.x = x;
      this.y = y;
      this.c = c;
      this.revealed = false;
      this.grid_hidden = game.add.graphics(this.x, this.y);
      this.grid_hidden.lineStyle(2, 0x000000, 1);
      this.grid_hidden.beginFill(0x888888);
      this.grid_hidden.drawPolygon(-20, -20, -20, 20, 20, 20, 20, -20, -20, -20);
      this.grid_hidden.endFill();
      this.grid_visible = game.add.graphics(this.x, this.y);
      this.grid_visible.lineStyle(2, 0x000000, 1);
      if (this.c === "X") {
        this.grid_visible.beginFill(0xFFAAAA);
      } else {
        this.grid_visible.beginFill(0xAAAAAA);
      }
      this.grid_visible.drawPolygon(-20, -20, -20, 20, 20, 20, 20, -20, -20, -20);
      this.grid_visible.endFill();
      this.grid_visible.visible = false;
      label = this.c;
      style = {
        align: "center",
        fontSize: "16px"
      };
      switch (this.c) {
        case 0:
          label = "";
          break;
        case 1:
        case 5:
          style.fill = "#0000FF";
          break;
        case 2:
        case 6:
          style.fill = "#00FF00";
          break;
        case 3:
        case 7:
          style.fill = "#FF0000";
          break;
        case 4:
        case 8:
          style.fill = "#FF00FF";
          break;
        default:
          null;
      }
      this.text = new Phaser.Text(game, this.x, this.y, label, style);
      this.text.anchor.set(0.5);
      this.text.visible = false;
      game.add.existing(this.text);
    }

    Cell.prototype.reveal = function() {
      this.revealed = true;
      this.text.visible = true;
      this.grid_hidden.visible = false;
      return this.grid_visible.visible = true;
    };

    return Cell;

  })();

  Board = (function() {
    function Board() {
      var x, y;
      this.size_x = 10;
      this.size_y = 10;
      this.mines = 10;
      this.content = (function() {
        var i, ref, results;
        results = [];
        for (x = i = 0, ref = this.size_x; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (y = j = 0, ref1 = this.size_y; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
              results1.push(null);
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
      this.setup_mines();
      this.setup_numbers();
      this.setup_grid();
    }

    Board.prototype.auto_propagate_reveal = function(x, y) {
      if (x < 0 || x >= this.size_x) {
        return;
      }
      if (y < 0 || y >= this.size_y) {
        return;
      }
      if (this.grid[x][y].revealed) {
        return;
      }
      return this.click_cell(x, y);
    };

    Board.prototype.click_cell = function(x, y) {
      if (this.grid[x][y].revealed) {
        return;
      }
      this.grid[x][y].reveal();
      if (this.grid[x][y].c === 0) {
        this.auto_propagate_reveal(x - 1, y - 1);
        this.auto_propagate_reveal(x - 1, y);
        this.auto_propagate_reveal(x - 1, y + 1);
        this.auto_propagate_reveal(x, y - 1);
        this.auto_propagate_reveal(x, y + 1);
        this.auto_propagate_reveal(x + 1, y - 1);
        this.auto_propagate_reveal(x + 1, y);
        return this.auto_propagate_reveal(x + 1, y + 1);
      }
    };

    Board.prototype.setup_grid = function() {
      var loc_x, loc_y, x, y;
      return this.grid = (function() {
        var i, ref, results;
        results = [];
        for (x = i = 0, ref = this.size_x; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (y = j = 0, ref1 = this.size_y; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
              loc_x = (size_x / 2 - 180) + 40 * x;
              loc_y = (size_y / 2 - 180) + 40 * y;
              results1.push(new Cell(loc_x, loc_y, this.content[x][y]));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    };

    Board.prototype.setup_mines = function() {
      var mines_left, results, x, y;
      mines_left = this.mines;
      results = [];
      while (mines_left > 0) {
        x = game.rnd.between(0, this.size_x - 1);
        y = game.rnd.between(0, this.size_y - 1);
        if (this.content[x][y] === null) {
          this.content[x][y] = "X";
          results.push(mines_left -= 1);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Board.prototype.mines_near_xy = function(x, y) {
      var i, j, len, len1, ref, ref1, total, xx, yy;
      total = 0;
      ref = [x - 1, x, x + 1];
      for (i = 0, len = ref.length; i < len; i++) {
        xx = ref[i];
        if (xx < 0 || xx >= this.size_x) {
          continue;
        }
        ref1 = [y - 1, y, y + 1];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          yy = ref1[j];
          if (yy < 0 || yy >= this.size_y) {
            continue;
          }
          if (this.content[xx][yy] === "X") {
            total += 1;
          }
        }
      }
      return total;
    };

    Board.prototype.setup_numbers = function() {
      var i, ref, results, x, y;
      results = [];
      for (x = i = 0, ref = this.size_x; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (y = j = 0, ref1 = this.size_y; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
            if (this.content[x][y] === "X") {
              continue;
            }
            results1.push(this.content[x][y] = this.mines_near_xy(x, y));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Board;

  })();

  GameState = (function() {
    function GameState() {}

    GameState.prototype.preload = function() {
      return this.game.load.audio("meow", "../audio/cat_meow.mp3");
    };

    GameState.prototype.update = function() {
      return this.result.text = "Have fun playing";
    };

    GameState.prototype.click = function(x, y) {
      x = Math.floor((x - size_x / 2 + 200) / 40);
      y = Math.floor((y - size_y / 2 + 200) / 40);
      if (x >= 0 && x <= this.board.size_x - 1 && y >= 0 && y <= this.board.size_y - 1) {
        this.board.click_cell(x, y);
        if (this.board.grid[x][y].c === "X") {
          return this.meow.play();
        }
      }
    };

    GameState.prototype.create = function() {
      this.result = game.add.text(16, 16, '', {
        fontSize: '32px',
        fill: '#fff'
      });
      this.game.stage.backgroundColor = "8F8";
      this.board = new Board;
      this.meow = game.add.audio("meow");
      return this.game.input.onTap.add((function(_this) {
        return function() {
          return _this.click(_this.game.input.activePointer.worldX, _this.game.input.activePointer.worldY);
        };
      })(this));
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
