// Generated by CoffeeScript 1.10.0
(function() {
  var Eye, GameState, Phaser, game, randint, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  randint = function(a, b) {
    return a + Math.floor(Math.random() * (b - a + 1));
  };

  Eye = (function() {
    function Eye() {
      this.x = randint(200, size_x - 200);
      this.y = randint(200, size_y - 200);
      this.eyesize = randint(50, 200);
      this.max_eye_movement = this.eyesize * 0.2;
      this.eye = game.add.graphics(this.x, this.y);
      this.eye.beginFill(0xFFFFFF);
      this.eye.lineStyle(5, 0x000000, 1);
      this.eye.drawCircle(0, 0, this.eyesize);
      this.eye.endFill();
      this.retina = game.add.graphics(this.x, this.y);
      this.retina.beginFill(0x000000);
      this.retina.lineStyle(3, 0x000000, 1);
      this.retina.drawCircle(0, 0, this.eyesize * 0.5);
      this.retina.endFill();
    }

    Eye.prototype.update = function(mx, my) {
      var dl, dx, dy;
      dx = mx - this.x;
      dy = my - this.y;
      dl = Math.sqrt(dx * dx + dy * dy);
      if (dl > this.max_eye_movement) {
        dx = this.max_eye_movement * dx / dl;
        dy = this.max_eye_movement * dy / dl;
      }
      this.retina.x = this.x + dx;
      return this.retina.y = this.y + dy;
    };

    return Eye;

  })();

  GameState = (function() {
    function GameState() {}

    GameState.prototype.update = function() {
      var eye, j, len, ref, results;
      ref = this.eyes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        eye = ref[j];
        results.push(eye.update(this.game.input.activePointer.worldX, this.game.input.activePointer.worldY));
      }
      return results;
    };

    GameState.prototype.create = function() {
      var i;
      this.game.stage.backgroundColor = "F88";
      return this.eyes = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 9; i = ++j) {
          results.push(new Eye);
        }
        return results;
      })();
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
