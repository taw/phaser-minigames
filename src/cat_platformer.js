// Generated by CoffeeScript 1.10.0
(function() {
  var GameState, Phaser, game, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  GameState = (function() {
    function GameState() {}

    GameState.prototype.preload = function() {
      this.game.load.image("cat", "/images/cat_images/cat17.png");
      return this.game.load.image("platform", "/images/grass_platform.png");
    };

    GameState.prototype.update = function() {
      game.physics.arcade.collide(this.player, this.platforms);
      this.player.body.velocity.x = 0;
      if (this.cursors.left.isDown) {
        this.player.body.velocity.x = -150;
      }
      if (this.cursors.right.isDown) {
        this.player.body.velocity.x = 150;
      }
      if (this.jumpButton.isDown) {
        return this.player.body.velocity.y = -250;
      }
    };

    GameState.prototype.add_platform = function(x, y) {
      var platform;
      platform = this.platforms.create(x, y, 'platform');
      platform.height = 40;
      platform.width = 200;
      platform.anchor.set(0.5);
      return platform.body.immovable = true;
    };

    GameState.prototype.create = function() {
      this.game.stage.backgroundColor = "8F8";
      game.physics.startSystem(Phaser.Physics.ARCADE);
      this.cursors = game.input.keyboard.createCursorKeys();
      this.jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
      this.player = game.add.sprite(size_x / 2, size_y - 100, 'cat');
      this.player.anchor.set(0.5);
      this.player.height = 64;
      this.player.width = 64;
      game.physics.enable(this.player, Phaser.Physics.ARCADE);
      this.player.body.gravity.y = 250;
      this.player.body.bounce.y = 0.5;
      this.player.body.collideWorldBounds = true;
      this.platforms = game.add.group();
      this.platforms.enableBody = true;
      this.add_platform(200, size_y - 100);
      this.add_platform(200, size_y - 300);
      this.add_platform(200, size_y - 500);
      this.add_platform(500, size_y - 200);
      this.add_platform(500, size_y - 400);
      this.add_platform(500, size_y - 600);
      this.add_platform(800, size_y - 100);
      this.add_platform(800, size_y - 300);
      return this.add_platform(800, size_y - 500);
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
