// Generated by CoffeeScript 1.10.0
(function() {
  var GameState, Phaser, game, size_x, size_y;

  Phaser = window.Phaser;

  size_x = window.innerWidth;

  size_y = window.innerHeight;

  GameState = (function() {
    function GameState() {}

    GameState.prototype.update = function() {
      var dt;
      dt = this.game.time.elapsed / 1000.0;
      if (game.input.keyboard.isDown(Phaser.KeyCode.W)) {
        this.left_paddle.y -= dt * 600;
      }
      if (game.input.keyboard.isDown(Phaser.KeyCode.S)) {
        this.left_paddle.y += dt * 600;
      }
      if (game.input.keyboard.isDown(Phaser.KeyCode.UP)) {
        this.right_paddle.y -= dt * 600;
      }
      if (game.input.keyboard.isDown(Phaser.KeyCode.DOWN)) {
        this.right_paddle.y += dt * 600;
      }
      this.left_paddle.y = game.math.clamp(this.left_paddle.y, 75, size_y - 75);
      this.right_paddle.y = game.math.clamp(this.right_paddle.y, 75, size_y - 75);
      this.ball.x += dt * this.ball_dx;
      this.ball.y += dt * this.ball_dy;
      this.ensure_bounds();
      this.left_score.text = this.left_score_val;
      return this.right_score.text = this.right_score_val;
    };

    GameState.prototype.ensure_bounds = function() {
      if (this.ball.x < 65 && this.ball_dx < 0) {
        if (this.hit_left_paddle()) {
          this.bounce_left_paddle();
        } else {
          this.right_score_val += 1;
          this.reset_ball();
          this.meow2.play();
        }
      }
      if (this.ball.x > size_x - 65 && this.ball_dx > 0) {
        if (this.hit_right_paddle()) {
          this.bounce_right_paddle();
        } else {
          this.left_score_val += 1;
          this.reset_ball();
          this.meow2.play();
        }
      }
      if (this.ball.y < 25 && this.ball_dy < 0) {
        this.ball_dy = -this.ball_dy;
      }
      if (this.ball.y > size_y - 25 && this.ball_dy > 0) {
        return this.ball_dy = -this.ball_dy;
      }
    };

    GameState.prototype.bounce_left_paddle = function() {
      var intercept, speed;
      intercept = (this.left_paddle.y - this.ball.y) / (65 + 25);
      speed = 1.1 * Math.sqrt(this.ball_dx * this.ball_dx + this.ball_dy * this.ball_dy);
      this.launch_ball(speed, 0 - 45 * intercept);
      return this.meow.play();
    };

    GameState.prototype.bounce_right_paddle = function() {
      var intercept, speed;
      intercept = (this.right_paddle.y - this.ball.y) / (65 + 25);
      speed = 1.1 * Math.sqrt(this.ball_dx * this.ball_dx + this.ball_dy * this.ball_dy);
      this.launch_ball(speed, 180 + 45 * intercept);
      return this.meow.play();
    };

    GameState.prototype.hit_left_paddle = function() {
      return Math.abs(this.left_paddle.y - this.ball.y) < 65 + 25;
    };

    GameState.prototype.hit_right_paddle = function() {
      return Math.abs(this.right_paddle.y - this.ball.y) < 65 + 25;
    };

    GameState.prototype.launch_ball = function(speed, angle) {
      this.ball_dx = Math.cos(game.math.degToRad(angle)) * speed;
      return this.ball_dy = Math.sin(game.math.degToRad(angle)) * speed;
    };

    GameState.prototype.reset_ball = function() {
      var angle;
      this.ball.x = size_x / 2;
      this.ball.y = size_y / 2;
      if (game.rnd.between(0, 1) === 0) {
        angle = game.rnd.between(-45, 45);
      } else {
        angle = game.rnd.between(180 - 45, 180 + 45);
      }
      return this.launch_ball(300.0, angle);
    };

    GameState.prototype.preload = function() {
      this.game.load.image("cat", "../images/cat_images/cat17.png");
      this.game.load.audio("meow", "../audio/cat_meow.mp3");
      return this.game.load.audio("meow2", "../audio/cat_meow_2.mp3");
    };

    GameState.prototype.create = function() {
      var i, ref, ref1, y;
      this.game.stage.backgroundColor = "FFFF00";
      this.grid = game.add.graphics(size_x / 2, size_y / 2);
      this.grid.lineStyle(5, "white");
      for (y = i = ref = -size_y / 2, ref1 = size_y / 2; i <= ref1; y = i += 20) {
        this.grid.moveTo(0, y);
        this.grid.lineTo(0, y + 10);
      }
      this.left_score_val = 0;
      this.right_score_val = 0;
      this.left_score = game.add.text(size_x / 4, size_y / 8, this.left_score_val, {
        fontSize: '100px',
        fill: '#000',
        align: "center"
      });
      this.left_score.anchor.set(0.5);
      this.right_score = game.add.text(size_x / 4 * 3, size_y / 8, this.right_score_val, {
        fontSize: '100px',
        fill: '#000',
        align: "center"
      });
      this.right_score.anchor.set(0.5);
      this.left_paddle = game.add.graphics(10, size_y / 2);
      this.left_paddle.lineStyle(5, "white");
      this.left_paddle.lineStyle(0);
      this.left_paddle.beginFill(0x000);
      this.left_paddle.drawRect(0, -65, 30, 130);
      this.right_paddle = game.add.graphics(size_x - 40, size_y / 2);
      this.right_paddle.lineStyle(5, "white");
      this.right_paddle.lineStyle(0);
      this.right_paddle.beginFill(0x000);
      this.right_paddle.drawRect(0, -65, 30, 130);
      this.ball = game.add.sprite(0, 0, "cat");
      this.ball.height = 50;
      this.ball.width = 50;
      this.ball.anchor.set(0.5, 0.5);
      this.reset_ball();
      this.meow = game.add.audio("meow");
      return this.meow2 = game.add.audio("meow2");
    };

    return GameState;

  })();

  game = new Phaser.Game(size_x, size_y);

  game.state.add("Game", GameState, true);

}).call(this);
